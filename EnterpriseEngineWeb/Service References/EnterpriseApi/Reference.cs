//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18047
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EnterpriseEngineWeb.EnterpriseApi {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DecisionType", Namespace="http://schemas.datacontract.org/2004/07/EnterpriseEngineApi")]
    [System.SerializableAttribute()]
    public partial class DecisionType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<bool> CheckBoxField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RandomStringField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ResultField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<bool> CheckBox {
            get {
                return this.CheckBoxField;
            }
            set {
                if ((object.ReferenceEquals(this.CheckBoxField, value) != true)) {
                    this.CheckBoxField = value;
                    this.RaisePropertyChanged("CheckBox");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RandomString {
            get {
                return this.RandomStringField;
            }
            set {
                if ((object.ReferenceEquals(this.RandomStringField, value) != true)) {
                    this.RandomStringField = value;
                    this.RaisePropertyChanged("RandomString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Result {
            get {
                return this.ResultField;
            }
            set {
                if ((this.ResultField.Equals(value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EnterpriseApi.IEnterpriseApi")]
    public interface IEnterpriseApi {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEnterpriseApi/GetDecision", ReplyAction="http://tempuri.org/IEnterpriseApi/GetDecisionResponse")]
        EnterpriseEngineWeb.EnterpriseApi.DecisionType GetDecision(EnterpriseEngineWeb.EnterpriseApi.DecisionType decision);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IEnterpriseApi/GetDecision", ReplyAction="http://tempuri.org/IEnterpriseApi/GetDecisionResponse")]
        System.IAsyncResult BeginGetDecision(EnterpriseEngineWeb.EnterpriseApi.DecisionType decision, System.AsyncCallback callback, object asyncState);
        
        EnterpriseEngineWeb.EnterpriseApi.DecisionType EndGetDecision(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEnterpriseApiChannel : EnterpriseEngineWeb.EnterpriseApi.IEnterpriseApi, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDecisionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDecisionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public EnterpriseEngineWeb.EnterpriseApi.DecisionType Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((EnterpriseEngineWeb.EnterpriseApi.DecisionType)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EnterpriseApiClient : System.ServiceModel.ClientBase<EnterpriseEngineWeb.EnterpriseApi.IEnterpriseApi>, EnterpriseEngineWeb.EnterpriseApi.IEnterpriseApi {
        
        private BeginOperationDelegate onBeginGetDecisionDelegate;
        
        private EndOperationDelegate onEndGetDecisionDelegate;
        
        private System.Threading.SendOrPostCallback onGetDecisionCompletedDelegate;
        
        public EnterpriseApiClient() {
        }
        
        public EnterpriseApiClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EnterpriseApiClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EnterpriseApiClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EnterpriseApiClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetDecisionCompletedEventArgs> GetDecisionCompleted;
        
        public EnterpriseEngineWeb.EnterpriseApi.DecisionType GetDecision(EnterpriseEngineWeb.EnterpriseApi.DecisionType decision) {
            return base.Channel.GetDecision(decision);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetDecision(EnterpriseEngineWeb.EnterpriseApi.DecisionType decision, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDecision(decision, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public EnterpriseEngineWeb.EnterpriseApi.DecisionType EndGetDecision(System.IAsyncResult result) {
            return base.Channel.EndGetDecision(result);
        }
        
        private System.IAsyncResult OnBeginGetDecision(object[] inValues, System.AsyncCallback callback, object asyncState) {
            EnterpriseEngineWeb.EnterpriseApi.DecisionType decision = ((EnterpriseEngineWeb.EnterpriseApi.DecisionType)(inValues[0]));
            return this.BeginGetDecision(decision, callback, asyncState);
        }
        
        private object[] OnEndGetDecision(System.IAsyncResult result) {
            EnterpriseEngineWeb.EnterpriseApi.DecisionType retVal = this.EndGetDecision(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDecisionCompleted(object state) {
            if ((this.GetDecisionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDecisionCompleted(this, new GetDecisionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDecisionAsync(EnterpriseEngineWeb.EnterpriseApi.DecisionType decision) {
            this.GetDecisionAsync(decision, null);
        }
        
        public void GetDecisionAsync(EnterpriseEngineWeb.EnterpriseApi.DecisionType decision, object userState) {
            if ((this.onBeginGetDecisionDelegate == null)) {
                this.onBeginGetDecisionDelegate = new BeginOperationDelegate(this.OnBeginGetDecision);
            }
            if ((this.onEndGetDecisionDelegate == null)) {
                this.onEndGetDecisionDelegate = new EndOperationDelegate(this.OnEndGetDecision);
            }
            if ((this.onGetDecisionCompletedDelegate == null)) {
                this.onGetDecisionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDecisionCompleted);
            }
            base.InvokeAsync(this.onBeginGetDecisionDelegate, new object[] {
                        decision}, this.onEndGetDecisionDelegate, this.onGetDecisionCompletedDelegate, userState);
        }
    }
}
